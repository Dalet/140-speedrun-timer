# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - refs/heads/*
    - refs/tags/*
  paths:
    exclude:
    - README.md
    - latestVersion.txt

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}:
    versionName: $(Build.SourceVersion)
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    versionName: $(Build.SourceBranchName)
  installerBaseFileName: speedrun-timer-installer_$(versionName)
  # ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')) }}:
  #   buildConfiguration: 'Experimental'
  # ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/v') }}:
  buildConfiguration: 'Release'

pool:
  vmImage: 'VS2017-Win2016'

steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '2.1.505'

- task: NuGetToolInstaller@0
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: Build solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: Run Tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Platform specific
- script: dotnet publish -r win-x64 -c $(buildConfiguration) -f netcoreapp2.1 -o $(Build.BinariesDirectory)/win SpeedrunModInstaller.Avalonia/SpeedrunModInstaller.Avalonia.csproj
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Publish windows installer'
- task: ArchiveFiles@2
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Archive Windows installer'
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/win'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/win_$(Build.BuildId).zip'

- script: dotnet publish -r osx-x64 -c $(buildConfiguration) -f netcoreapp2.1 -o $(Build.BinariesDirectory)/mac SpeedrunModInstaller.Avalonia/SpeedrunModInstaller.Avalonia.csproj
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Publish Mac installer'
- task: ArchiveFiles@2
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Archive Mac installer'
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/mac'
    includeRootFolder: true
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/mac_$(Build.BuildId).tar.gz'

- script: dotnet publish -r linux-x64 -c $(buildConfiguration) -f netcoreapp2.1 -o $(Build.BinariesDirectory)/linux SpeedrunModInstaller.Avalonia/SpeedrunModInstaller.Avalonia.csproj
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Publish linux installer'
- task: ArchiveFiles@2
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Archive Linux installer'
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/linux'
    includeRootFolder: true
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/linux_$(Build.BuildId).tar.gz'

# Framework-dependent (requires dotnet core runtime on the client machine)
- script: dotnet publish -c $(buildConfiguration) -o $(Build.BinariesDirectory)/fdd SpeedrunModInstaller.ConsoleApp/SpeedrunModInstaller.ConsoleApp.csproj
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Publish framework-dependent installer'
- task: ArchiveFiles@2
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  displayName: 'Archive framework-dependent installer'
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/fdd'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/fdd_$(Build.BuildId).zip'

- bash: ls -lR "$(System.ArtifactsDirectory)"

- task: PublishBuildArtifacts@1
  displayName: Publish artifacts
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'Container'

- task: GitHubRelease@0
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    gitHubConnection: 'GitHub connection 1'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    title: '$(Build.SourceBranchName)'
    tagSource: auto
    isDraft: true
    assets: $(System.ArtifactsDirectory)/**/*
